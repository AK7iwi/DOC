1) Structure en C
	https://zestedesavoir.com/tutoriels/755/le-langage-c-1/1043_aggregats-memoire-et-fichiers/4279_structures/

2) Structure / Liste chainee C
	https://chgi.developpez.com/liste/
	
3)Born2beroot
	Partition : https://www.youtube.com/watch?v=OQEdjt38ZJA
	Configuration : https://baigal.medium.com/born2beroot-e6e26dfb50ac
	Aide + script et ligne passwrd(ucredit,..) : https://github.com/HEADLIGHTER/Born2BeRoot-42/blob/main/walkthrough37.txt

4) Variable locale, globale,statique C

https://www.codequoi.com/variables-locales-globales-statiques-en-c/

5)Signal C

https://www.codequoi.com/envoyer-et-intercepter-un-signal-en-c/#:~:text=Envoyer%20des%20signaux%20avec%20la,leur%20propre%20commande%20kill%20interne.

https://medium.com/@oduwoledare/42-minitalk-explained-5b236adc2c24

6) Bitwise

https://www.codequoi.com/binaire-010-operations-bitwise-bit-shifting/

https://code.tutsplus.com/articles/understanding-bitwise-operators--active-11301

7) Parsing Struct / Info Struct

Stuct modifer dans une fct, pas les int,char,... Besoin d'un return;

Ex1 : 

typedef struct s_error
{
    int     error_g;
}	t_error;

int is_int(t_error *error, int i)
{
	if(error->error_g > 3)
	{
		error->error_g = 77;
		i = 55;
		return(1);

	}
	error->error_g = 88;
	i = 42;
	return(0);
}

int main()
{
	t_error *error;
	int i;
    
    error = malloc(sizeof(t_error));
	i = 0;
    error->error_g = 5;
	//error->error_g = 0;
	if(is_int(error,i) == 0)
		printf("%i%i", error->error_g, i);
	printf("%i%i", error->error_g, i);
	free(error);
	return(0);
}
Ex2: 
typedef struct s_error
{
    int     error_g;
}	t_error;

void init_error(t_error *error)
{
	error->error_g = 5;
}

void is_int(t_error *error, int i)
{
	if(error->error_g > 3)
	{
		error->error_g = 77;
		i = 55;
	}
	error->error_g = 88;
	i = 42;
}
int main()
{
	t_error *error;
	int i;
    
    error = malloc(sizeof(t_error));
	i = 0;
    init_error(error);
	is_int(error,i);
	printf("%i%i", error->error_g, i);
	return(0);
}

Ex3 Struct sans malloc + Struct qui pointe sur une struct 

typedef struct s_error
{
    uint16_t    error_g;
	uint8_t		exit;
}				t_error;

typedef struct	s_data 
{
	t_error *error;
	char 	**map;
}				t_data;

// void	fake(t_error *error) {
// 	error->error_g = 4;
// }

// void	fake2(t_data *data) {
// 	data->endian = 42;
// }

// void	fake3(t_data *data) {
// 	data->error->exit = 75;
// }

// printf("avant %d\n", error.error_g);
// fake(data.error);
// printf("apres %d\n", error.error_g);
// printf("------------\n");

// printf("avant %d\n", data.endian);
// fake2(&data);
// printf("apres %d\n", data.endian);
// printf("------------\n");

// printf("avant %d\n", data.error->exit);
// fake3(&data);
// printf("apres %d\n", data.error->exit);
// printf("------------\n");