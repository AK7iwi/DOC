1) Pointeur et adresse C++ vs C

https://cpp.developpez.com/cours/cpp/?page=page_6

C : 

The & operator is used to obtain the memory address of a variable.
The * operator is used to access the value pointed to by a pointer.

C++ : 

obtain memory addresses using the & operator and
access values using the * operator for pointers. 
The reference stringREF behaves similarly to a pointer but 
is more like an alias

Voir cpp_pool cpp01/ex02

2) Constructeur/cpy Constructeur/ destructor

	CPP02:
	
	int main( void )
	{
		Fixed a;
		Fixed b( a );
		Fixed c;
	
		c = b;
	
		std::cout << a.getRawBits() << std::endl;
		std::cout << b.getRawBits() << std::endl;
		std::cout << c.getRawBits() << std::endl;
		return 0;
	}

	Fixed(a) : Appel le default constructor
	Fixed b (a) : appelle copy comstructor 
	FIxed c: Appel le default constructor
	c = b : Appel le copy assignement operator


	Forme canonical : https://scg.unibe.ch/download/p2/11Cpp.pdf page 28

	class myClass 
	{
		public:
			myClass(void);   // default constructor
			myClass(const myClass& copy); // copy constructor
			...     					// other constructors
			~myClass(void);   // destructor
			myClass& operator=(const myClass&); // assignment
			...    	// other public member functions 
		private: 
	}

3) Static methode dasns le .hpp vs dans le .cpp

Dans le .cpp comme en C. La fct n'est utilise que dans le fichier et il ne faut pas la redeclarer dans le .hpp
Dans le point .hpp la fct est utiliser en dehors du fichier mais elle n'est pas instantiable. ex: cpp06/ex00 (static void convert) 
	

