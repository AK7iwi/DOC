
0) Private, protected, public

Private: Can be used only by the class(in the class(.cpp)?)

Protected: Private but inherited class van also use the variavle or the method

Public: Can be used anywhere 



1) Pointeur et adresse C++ vs C

https://cpp.developpez.com/cours/cpp/?page=page_6

C : 

The & operator is used to obtain the memory address of a variable.
The * operator is used to access the value pointed to by a pointer.

C++ : 

obtain memory addresses using the & operator and
access values using the * operator for pointers. 
The reference stringREF behaves similarly to a pointer but 
is more like an alias

Voir cpp_pool cpp01/ex02

2) Constructeur/cpy Constructeur/ destructor

	CPP02:
	
	int main(void)
	{
		Fixed a;
		Fixed b(a);
		Fixed c;
	
		c = b;
	
		std::cout << a.getRawBits() << std::endl;
		std::cout << b.getRawBits() << std::endl;
		std::cout << c.getRawBits() << std::endl;
		return 0;
	}

	Fixed(a) : Appel le default constructor
	Fixed b (a) : appelle copy comstructor 
	FIxed c: Appel le default constructor
	c = b : Appel le copy assignement operator


	Forme canonical : https://scg.unibe.ch/download/p2/11Cpp.pdf page 28

	class MyClass 
	{
		public:
			MyClass(void);   // default constructor
			MyClass(MyClass const &copy); // copy constructor
			...     					// other constructors
			~MyClass(void);   // destructor
			MyClass& operator=(MyClass const &rhs); // assignment
			...    	// other public member functions 
		private: 
	}

3) Static methode dasns le .hpp vs dans le .cpp

Dans le .cpp comme en C. La fct n'est utilise que dans le fichier et il ne faut pas la redeclarer dans le .hpp
Dans le point .hpp la fct est utiliser en dehors du fichier mais elle n'est pas instantiable. ex: cpp06/ex00 (static void convert) 
	

4) Cast 

https://www.geeksforgeeks.org/dynamic-_cast-in-cpp/


5) Exception

Soit en "catchant" l'exeption, 

Soit avec .what

6)Container 

https://en.cppreference.com/w/cpp/container

7)Methode static/ static fct

a) Static methode ne partage pas les attributs public, private ou protected
	Ne s'utilise pas sur un object (voir cpp06/ex00)

b) Fct static: 

Example : 

class BitcoinExchange

void exchange(), si utiliser que dans le .cpp <=> pas a declarer dans le .hpp

void BitcoinExchange::exchange() <=> a declarer dans le .hpp